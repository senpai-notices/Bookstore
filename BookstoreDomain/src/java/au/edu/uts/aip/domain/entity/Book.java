package au.edu.uts.aip.domain.entity;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * A Data model class related to the BOOK table in the database. Book entity describes the a book
 * object It has properties id, name, tile and price All the attributes of this model class are
 * private attributes and all of them have relative get and set functions in order to access the
 * attributes
 *
 * @author
 */
@NamedQueries({
    @NamedQuery(name = "Book.getLatest", query = "SELECT b FROM Book b ORDER BY b.publishYear DESC")
    ,
    @NamedQuery(name = "Book.getSingle", query = "SELECT DISTINCT b FROM Book b LEFT JOIN FETCH b.sales "
            + "WHERE b.isbn10 like :isbn10 AND b.isbn13 like :isbn13 AND b.title like :title")
//@NamedQuery(name="Book.getSales", query="SELECT DISTINCT b FROM Book b JOIN FETCH b.sales WHERE b.id=:bookId AND b.sales.seller=:seller")
})
@Entity
@Table(uniqueConstraints = {
    @UniqueConstraint(columnNames = {"isbn10", "isbn13", "title"})
})
public class Book implements Serializable {

    /**
     * The definition of the attributes of Book entity the id of the book is generated automatically
     * by the database; the name is the author name; title describes the title of the book; the
     * price describes the book price;
     *
     */
    private Long id;
    private String author;
    private String title;
    private List<BookSale> sales = new ArrayList<>();
    private String isbn10;
    private String isbn13;
    private int publishYear;
    private int pageCount;
    private String publisher;
    private String imgPath;

    public String getPublisher() {
        return publisher;
    }

    public void setPublisher(String publisher) {
        this.publisher = publisher;
    }

    /**
     * The id of the book entity in Book table Not null value The type of the value is long; it will
     * be generated by database, it relates to the primary key of the Book Table
     *
     * @return a long value
     */
    @Id
    @GeneratedValue
    public Long getId() {
        return this.id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /**
     * The author name of the book entity in Book table Not null value The type : String
     *
     * @return a String value
     */
    @Column(nullable = false)
    public String getAuthor() {
        return this.author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    /**
     * The title of the book entity in Book table Not null value The type : String
     *
     * @return a String value
     */
    @Column(nullable = false)
    public String getTitle() {
        return this.title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    @OneToMany(mappedBy = "book")
    @JoinColumn(name = "book")
    public List<BookSale> getSales() {
        return sales;
    }

    public void setSales(List<BookSale> sales) {
        this.sales = sales;
    }

    public int getPublishYear() {
        return publishYear;
    }

    public void setPublishYear(int publishYear) {
        this.publishYear = publishYear;
    }

    public String getImgPath() {
        return imgPath;
    }

    public void setImgPath(String imgPath) {
        this.imgPath = imgPath;
    }

    public String getIsbn10() {
        return isbn10;
    }

    public void setIsbn10(String isbn10) {
        this.isbn10 = isbn10;
    }

    public String getIsbn13() {
        return isbn13;
    }

    public void setIsbn13(String isbn13) {
        this.isbn13 = isbn13;
    }

    public int getPageCount() {
        return pageCount;
    }

    public void setPageCount(int pageCount) {
        this.pageCount = pageCount;
    }
}
